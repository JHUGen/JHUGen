/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOSPINZERO_3D_Acc_VH
#define ROOSPINZERO_3D_Acc_VH

#include "RooSpinZero.h"
#include "TLorentzVector.h"
#include "TLorentzRotation.h"
 
class RooSpinZero_3D_withAccep_VH : public RooSpinZero {
public:
  RooSpinZero_3D_withAccep_VH() {};
  RooSpinZero_3D_withAccep_VH(const char *name, const char *title,
    RooAbsReal& _h1,
    RooAbsReal& _h2,
    RooAbsReal& _Phi,
    RooAbsReal& _sqrts,
    RooAbsReal& _mX,
    RooAbsReal& _mV,
    RooAbsReal& _R1Val,
    RooAbsReal& _R2Val,
    int _parameterization,
    RooAbsReal& _a1Val,
    RooAbsReal& _phi1Val,
    RooAbsReal& _a2Val,
    RooAbsReal& _phi2Val,
    RooAbsReal& _a3Val,
    RooAbsReal& _phi3Val,
    RooAbsReal& _g1Val,
    RooAbsReal& _g2Val,
    RooAbsReal& _g3Val,
    RooAbsReal& _g4Val,
    RooAbsReal& _g1ValIm,
    RooAbsReal& _g2ValIm,
    RooAbsReal& _g3ValIm,
    RooAbsReal& _g4ValIm,
    RooAbsReal& _fa2,
    RooAbsReal& _fa3,
    RooAbsReal& _phia2,
    RooAbsReal& _phia3,
    RooAbsReal& _b2,
    RooAbsReal& _cgaus,
    RooAbsReal& _sgaus,
    bool _withAcc);

  RooSpinZero_3D_withAccep_VH(const RooSpinZero_3D_withAccep_VH& other, const char* name=0);
  virtual TObject* clone(const char* newname) const { return new RooSpinZero_3D_withAccep_VH(*this, newname); }
  inline virtual ~RooSpinZero_3D_withAccep_VH() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;


protected:

  RooRealProxy sqrts;
  RooRealProxy b2;
  RooRealProxy cgaus;
  RooRealProxy sgaus;
  bool withAcc;

  Double_t evaluate() const;

private:

  vector<TLorentzVector> Calculate4Momentum(float Mx, float M1, float M2, float theta, float theta1, float theta2, float _Phi1_, float _Phi_) const;

};
 
#endif
